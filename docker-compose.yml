version: "3.9"

services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379" # LEFT(local port) : RIGHT(contianer port)
    restart: unless-stopped # only stops when stopped manually
    networks: # all the services are connected through same network(chat-network) using redis
      - chat-network

  auth_service:
    build: ./auth_service # looks for Dockerfile in this folder
    container_name: auth_service
    ports:
      - "8000:8000"
    volumes:
      - ./auth_service:/app # copies auth_service project folder to app folder
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    command: >
      sh -c "pip install -r requirements.txt &&
             python3 manage.py makemigrations &&
             python3 manage.py migrate &&
             python3 manage.py runserver 0.0.0.0:8000"
    networks:
      - chat-network
    environment:
      - DJANGO_ALLOWED_HOSTS=*

  chat_service:
    build: ./chat_service
    container_name: chat_service
    ports:
      - "8001:8001"
    expose:
      - "8001"
    volumes:
      - ./chat_service:/app
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - auth_service
    restart: unless-stopped
    command: >
      sh -c "pip install -r requirements.txt &&
             python3 manage.py makemigrations &&
             python3 manage.py migrate &&
             python3 manage.py runserver 0.0.0.0:8001"
    networks:
      - chat-network
    environment:
      - AUTH_SERVICE_URL=http://auth_service:8000
      - DJANGO_ALLOWED_HOSTS=*

  celery:
    build: ./auth_service
    container_name: celery
    depends_on:
      - redis
    volumes:
      - ./auth_service:/app
      - ./.env:/app/.env
    env_file:
      - .env
    restart: unless-stopped
    command: >
      sh -c "pip install -r requirements.txt &&
              celery -A auth_service.celery worker --loglevel=info"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - chat-network

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass
      POSTGRES_DB: auth_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - chat-network

volumes:
  postgres_data:

networks:
  chat-network:
    driver: bridge
